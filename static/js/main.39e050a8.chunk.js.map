{"version":3,"sources":["Components/Header.js","Components/PageDiv.js","Themes/Colors.js","Themes/Metrics.js","Components/Button.js","Components/Text.js","Components/Stack.js","Containers/Rules.js","Containers/Leaderboard.js","Components/Label.js","Components/Input.js","Containers/GameSettings.js","Containers/Guesses.js","Components/TextDisplay.js","Containers/ResultPage.js","Containers/Gameboard.js","Containers/Game.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","PageDiv","styled","div","colors","primary","primaryAccent","secondary","secondaryAccent","black","light","white","metrics","buttonWidth","radiusSmall","fontSize","small","medium","large","Button","button","Colors","Metrics","Text","margin","align","css","size","color","Stack","vertical","justify","Rules","Leaderboard","LabelStyle","label","Label","text","InputField","input","Input","placeholder","onChange","e","onChangeHandler","id","value","Settings","GameSettings","state","username","level","this","setState","target","style","bind","onClick","onCreateNewGame","Component","GuessesTable","table","GuessesRow","tr","GuessesHeader","th","GuessesData","td","Guesses","guesses","map","guess","i","key","feedback","nums","numPlaces","TextDisplay","horizontal","Result","ResultPage","result","guessesLeft","secretCode","children","exitGame","Gameboard","currentGuess","notification","status","guessString","validateGuess","length","isValid","guessObject","secretCodeObject","correctNums","correctNumPlaces","isNaN","digit","Number","hasOwnProperty","indices","count","index","Math","min","newGuesses","slice","newGuess","push","onExitGame","onSubmitGuess","Game","showrules","showleaderboard","currentModal","live","modal","gameSettings","generateCode","then","code","axios","get","response","data","split","join","catch","error","console","log","metaData","createNewGame","showModal","visible","onClose","hideModal","showconfirmexit","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39e050a8.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = props => {\n  return (\n    <div>Header</div>\n  )\n}\n\nexport default Header","import styled from 'styled-components'\n\nconst PageDiv = styled.div`\n  margin: 10px auto;\n  max-width: 500px;\n  display: flex;\n  flex-direction: column;\n`\n\nexport default PageDiv","const colors = {\n  primary: '#0288D1',\n  primaryAccent: '#f8f8ff',\n  secondary: '#303030',\n  secondaryAccent: '#a9a9a9',\n  black: '#000000',\n  light: '#E8E8E8',\n  white: '#FFFFFF'\n}\n\nexport default colors","const metrics = {\n  buttonWidth: 140,\n  radiusSmall: 5,\n  fontSize: {\n    small: 10,\n    medium: 18,\n    large: 30\n  }\n}\n\nexport default metrics","import styled from 'styled-components'\nimport { Colors, Metrics } from '../Themes/index'\n\nconst Button = styled.button`\n  background-color: ${Colors.primary};\n  color: ${Colors.primaryAccent};\n  border-radius: ${Metrics.radiusSmall}px;\n  font-size: ${Metrics.fontSize.medium}px;\n  width: ${Metrics.buttonWidth}px;\n  margin: 5px;\n  padding: 5px;\n  cursor: pointer;\n  &:hover {\n    font-size: calc(${Metrics.fontSize.medium}px + 2px)\n  } \n\n`\n\nexport default Button","import styled, { css } from 'styled-components'\nimport { Colors, Metrics } from '../Themes/index'\n\nconst Text = styled.div`\n  margin: ${props => props.margin ? props.margin : '0px'};\n  ${props => props.align && css`\n    text-align: ${props.align}\n  `};\n  ${props => props.size && css`\n    font-size: ${Metrics.fontSize[props.size]}px\n  `};\n  ${props => props.color && css`\n    color: ${Colors[props.color]}\n  `};\n`\n\nexport default Text","import styled, { css } from 'styled-components'\n\n// default stack is horizontal\nconst Stack = styled.div`\n  display: flex;\n  ${props => props.vertical && css`\n    flex-direction: column\n  `};\n  ${props => props.justify && css`\n    justify-content: ${props.justify}\n  `};\n  ${props => props.align && css`\n    align-items: ${props.align}\n  `}\n`\n\nexport default Stack","import React from 'react'\n\nconst Rules = props => (\n  <div>\n    <div>Game rules</div>\n    <div>\n      The computer will randomly select a pattern of four different numbers from a total of 8 different numbers (0 - 7)\n    </div>\n    <div>\n      You will have 10 attempts to guess the number combinations\n    </div>\n    <div>\n      At the end of each guess, the computer will provide blah blah blah\n    </div>\n\n  </div>\n)\n\nexport default Rules","import React from 'react'\n\nconst Leaderboard = props => (\n  <div>Leaderboard Page</div>\n)\n\nexport default Leaderboard","import React from 'react'\nimport styled from 'styled-components'\nimport { Colors } from '../Themes/index'\n\nconst LabelStyle = styled.label`\n  color: ${Colors.black};\n  display: inline-block;\n  width: 100px;\n`\n\nconst Label = props => {\n  return (\n    <LabelStyle>\n      {props.text}\n    </LabelStyle>\n  )\n}\n\nexport default Label","import React from 'react'\nimport styled from 'styled-components'\nimport { Colors, Metrics } from '../Themes/index'\nimport Label from './Label'\n\nconst InputField = styled.input`\n  border-color: ${Colors.secondaryAccent};\n  background-color: ${Colors.light};\n  color: ${Colors.secondary};\n  border-radius: calc(${Metrics.radiusSmall}px - 2px);\n  font-size: ${Metrics.fontSize.small}px;\n  width: ${Metrics.buttonWidth}px;\n  margin: 5px;\n  padding: 5px;\n  cursor: pointer;\n`\n\nconst Input = props => {\n  return (\n    <div>\n      <Label text={props.text}/>\n      <InputField\n        placeholder={props.placeholder}\n        onChange={(e) => props.onChangeHandler(props.id, e)}\n        value={props.value}\n      />\n    </div>\n  )\n}\n\nexport default Input","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { Colors, Metrics } from '../Themes/index'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Stack from '../Components/Stack'\nimport Input from '../Components/Input'\nimport Text from '../Components/Text'\nimport Button from '../Components/Button'\n\nconst Settings = styled.div`\n  margin: 15px;\n  padding: 15px;\n  border: 1px ${Colors.light} solid;\n  border-radius: ${Metrics.radiusSmall}px;\n`\n\nclass GameSettings extends Component {\n  state = {\n    username: 'guest',\n    level: 1\n  }\n\n  onChangeHandler(id, e) {\n    this.setState({\n      [id]: e.target.value\n    })\n  }\n\n  render () {\n    return (\n      <Settings>\n        <Stack vertical align='center'>\n          <Stack align='center'>\n            <SettingsIcon color='action' />\n            <Text size='medium' color='secondary'>Game Settings</Text>\n            <SettingsIcon color='action' />\n          </Stack>\n          <div style={{margin: '10px 20px'}}>\n            <Input\n              text='username'\n              id='username'\n              placeholder='leave blank for guest'\n              onChangeHandler={this.onChangeHandler.bind(this)}\n            />\n            <Input\n              text='level'\n              id='level'\n              placeholder='choose between 1-10'\n              onChangeHandler={this.onChangeHandler.bind(this)}\n            />\n          </div>\n          <Button\n            onClick={() => this.props.onCreateNewGame(this.state)}\n          >\n            New Game\n          </Button>\n        </Stack>\n      </Settings>\n    )\n  }\n}\n\nexport default GameSettings","import React from 'react'\nimport styled from 'styled-components'\nimport { Colors, Metrics } from '../Themes/index'\n\nconst GuessesTable = styled.table`\n  border-collapse: collapse;\n  border-radius: ${Metrics.radiusSmall}px;\n  overflow: hidden;\n`\nconst GuessesRow = styled.tr`\n\n`\n\nconst GuessesHeader = styled.th`\n  padding: 1em;\n  background: ${Colors.light};\n  border-bottom: 2px solid ${Colors.white};\n`\nconst GuessesData = styled.td`\n  padding: 1em;\n  background: ${Colors.light};\n  border-bottom: 2px solid ${Colors.white};\n  text-align: center\n`\n\nconst Guesses = props => {\n  return (\n    <GuessesTable>\n      <GuessesRow>\n        <GuessesHeader>Your Guess</GuessesHeader>\n        <GuessesHeader>Correct Numbers</GuessesHeader>\n        <GuessesHeader>Correct Numbers AND Places</GuessesHeader>\n      </GuessesRow>\n      {props.guesses.map((guess, i) => {\n        return (\n          <GuessesRow key={i}>\n            <GuessesData>{guess.guess}</GuessesData>\n            <GuessesData>{guess.feedback.nums}</GuessesData>\n            <GuessesData>{guess.feedback.numPlaces}</GuessesData>\n          </GuessesRow>\n        )\n      })}\n    </GuessesTable>\n  )\n}\n\nexport default Guesses","import React from 'react'\nimport styled from 'styled-components'\nimport { Colors, Metrics } from '../Themes/index'\nimport Label from './Label'\nimport Stack from './Stack'\n\nconst Text = styled.div`\n  border-color: ${Colors.secondaryAccent};\n  background-color: ${Colors.light};\n  color: ${Colors.secondary};\n  border-radius: calc(${Metrics.radiusSmall}px - 2px);\n  font-size: ${Metrics.fontSize.small}px;\n  width: ${Metrics.buttonWidth}px;\n  margin: 5px;\n  padding: 5px;\n`\n\nconst TextDisplay = props => {\n  return (\n    <Stack horizontal align='center'>\n      <Label text={props.text} />\n      <Text>\n        {props.value}\n      </Text>\n    </Stack>\n  )\n}\n\nexport default TextDisplay","import React from 'react'\nimport styled from 'styled-components'\nimport Text from '../Components/Text'\nimport TextDisplay from '../Components/TextDisplay'\nimport Stack from '../Components/Stack'\nimport Button from '../Components/Button'\n\nconst Result = styled.div`\n`\n\nconst ResultPage = props => {\n  return (\n    <Result>\n      <Stack vertical align='center'>\n        <Text size='medium'>\n          {props.result}\n        </Text>\n        <TextDisplay text='Username' value={props.username} />\n        <TextDisplay text='Guesses Used' value={`${(10 - props.guessesLeft)} / 10`} />\n        <TextDisplay text='Secret Code' value={props.secretCode} />\n        {props.children}\n        <Button onClick={() => props.exitGame()}>Play Again</Button>\n      </Stack>\n    </Result>\n  )\n}\n\nexport default ResultPage","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { Colors, Metrics } from '../Themes/index'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Stack from '../Components/Stack'\nimport Input from '../Components/Input'\nimport Text from '../Components/Text'\nimport Button from '../Components/Button'\nimport Guesses from './Guesses'\nimport ResultPage from './ResultPage'\nimport TextDisplay from '../Components/TextDisplay'\n\nconst Settings = styled.div`\n  margin: 15px;\n  padding: 15px;\n  border: 1px ${Colors.light} solid;\n  border-radius: ${Metrics.radiusSmall}px;\n`\n\nclass Gameboard extends Component {\n  state = {\n    guesses: [],\n    currentGuess: '',\n    notification: '',\n    status: 'playing',\n    secretCode: this.props.secretCode,\n    guessesLeft: 10\n  }\n\n  onSubmitGuess() {\n    let guessString = this.state.currentGuess\n    if (this.validateGuess(guessString)) {\n      this.setState({\n        notification: ''\n      }, () => {\n        let guessesLeft = 10 - this.state.guesses.length\n        if (guessesLeft === 0) {\n          this.setState({\n            guessesLeft: 10 - this.state.guesses.length,\n            status: 'lose'\n          })\n        } else {\n          this.setState({\n            guessesLeft: 10 - this.state.guesses.length,\n            currentGuess: ''\n          })\n        }\n      } )\n    } else {\n      this.setState({\n        notification: 'guess must be a four digit number between 0 and 7'\n      })\n    }\n  }\n\n  validateGuess(guess) {\n    let isValid = true\n    let guessObject = {}\n    let secretCodeObject = {}\n    let correctNums = 0\n    let correctNumPlaces = 0\n    let { secretCode } = this.state\n    if (guess.length !== 4 || isNaN(guess)) {\n      return false\n    }\n    for (let i = 0; i < guess.length; i ++ ) {\n      let digit = guess[i]\n      if (Number(digit) === 8 || Number(digit) === 9) {\n        isValid = false\n      } else {\n        if (!guessObject.hasOwnProperty(digit)) {\n          guessObject[digit] = {}\n          guessObject[digit].indices = {[i]:i}\n          guessObject[digit].count = 1\n        } else {\n          guessObject[digit].indices[i] = i\n          guessObject[digit].count++\n        }\n      }\n    }\n    if (isValid) {\n      for (let i = 0; i < secretCode.length; i ++) {\n        let digit = secretCode[i]\n        if (!secretCodeObject.hasOwnProperty(digit)){\n          secretCodeObject[digit] = {}\n          secretCodeObject[digit].indices = {[i]:i}\n          secretCodeObject[digit].count = 1\n        } else {\n          secretCodeObject[digit].indices[i] = i\n          secretCodeObject[digit].count++\n        }\n      }\n      for (let digit in secretCodeObject) {\n        if (guessObject.hasOwnProperty(digit)) {\n          correctNums+= Math.min(secretCodeObject[digit].count,guessObject[digit].count)\n          for (let index in secretCodeObject[digit].indices){\n            if (guessObject[digit].indices.hasOwnProperty(index)) {\n              correctNumPlaces++\n              correctNums--\n            }\n            if (correctNumPlaces === 4) {\n              this.setState({\n                status: 'win'\n              })\n            }\n          }\n        }\n      }\n      let newGuesses = this.state.guesses.slice(0)\n      let newGuess = {\n        guess: guess,\n        feedback: {\n          nums: correctNums,\n          numPlaces: correctNumPlaces\n        }\n      }\n      newGuesses.push(newGuess)\n      this.setState({\n        guesses: newGuesses\n      })\n    }\n    return isValid\n  }\n\n  onChangeHandler(id, e) {\n    this.setState({\n      [id]: e.target.value\n    })\n  }\n\n  render ()  {\n    switch(this.state.status) {\n      case 'win':\n        return (\n          <ResultPage\n            result='You Win!'\n            exitGame={this.props.onExitGame}\n            secretCode={this.state.secretCode}\n            guessesLeft={this.state.guessesLeft}\n            username={this.props.username}\n          >\n            <Guesses guesses={this.state.guesses} />\n          </ResultPage>\n        )\n      case 'lose':\n        return (\n          <ResultPage\n            result='You Lose!'\n            exitGame={this.props.onExitGame}\n            secretCode={this.state.secretCode}\n            guessesLeft={this.state.guessesLeft}\n            username={this.props.username}\n          >\n            <Guesses guesses={this.state.guesses} />\n          </ResultPage>\n        )\n      default:\n        return (\n          <Settings>\n            <Stack vertical align='center'>\n              <Stack align='center'>\n                <SettingsIcon color='action' />\n                <Text size='medium' color='secondary'>Game</Text>\n                <SettingsIcon color='action' />\n              </Stack>\n              <Button\n                id='confirmexit'\n                onClick={(e) => this.props.onExitGame(e)}\n              >\n                I give up!\n              </Button>\n              <div style={{margin: '10px 20px'}}>\n                <TextDisplay text='Username' value={this.props.username} />\n                <TextDisplay text='Guesses Left' value={this.state.guessesLeft} />\n                <TextDisplay text='Secret Code' value={this.props.secretCode} />\n                <Input\n                  text='Current Guess'\n                  id='currentGuess'\n                  placeholder='please enter four digit number'\n                  onChangeHandler={this.onChangeHandler.bind(this)}\n                  value={this.state.currentGuess}\n                />\n                <Text\n                  margin='10px 0'\n                  color='primary'\n                  size='medium'\n                >\n                  {this.state.notification}\n                </Text>\n              </div>\n              <Button\n                id='submitGuess'\n                onClick={this.onSubmitGuess.bind(this)}\n              >\n                Submit Guess\n              </Button>\n              <Guesses guesses={this.state.guesses} />\n            </Stack>\n          </Settings>\n      )\n    }\n  }\n}\n\nexport default Gameboard","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Rodal from 'rodal'\nimport 'rodal/lib/rodal.css'\nimport PageDiv from '../Components/PageDiv'\nimport Button from '../Components/Button'\nimport Text from '../Components/Text'\nimport Stack from '../Components/Stack'\nimport Rules from '../Containers/Rules'\nimport Leaderboard from '../Containers/Leaderboard'\nimport GameSettings from '../Containers/GameSettings'\nimport Gameboard from '../Containers/Gameboard'\n\n\nclass Game extends Component {\n  state = {\n    showrules: false,\n    showleaderboard: false,\n    currentModal: '',\n    live: false,\n    username: '',\n    level: '',\n    secretCode: null\n  }\n\n  showModal(e) {\n    let modal = `show${e.target.id}`\n    this.setState({\n      [modal]: true,\n      currentModal: modal\n    })\n  }\n\n  hideModal() {\n    this.setState({\n      [this.state.currentModal]: false\n    })\n  }\n\n  createNewGame(gameSettings) {\n    let { username, level } = gameSettings\n    this.generateCode()\n      .then(code => {\n        this.setState({\n          ...this.state,\n          secretCode: code,\n          username: username,\n          level: level,\n          live: true\n        })\n      })\n  }\n\n  generateCode() {\n    let url = 'https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new'\n    return axios.get(url)\n      .then((response) => {\n        return response.data.split('\\n').slice(0, 4).join('')\n      })\n      .catch(error => console.log(`error getting code: ${error}`))\n  }\n\n  exitGame() {\n    this.setState({\n      live: false\n    })\n  }\n\n  render () {\n    let metaData = !this.state.live ?\n    <GameSettings onCreateNewGame={this.createNewGame.bind(this)} /> :\n    <Gameboard\n      username={this.state.username}\n      onExitGame={this.exitGame.bind(this)}\n      secretCode={this.state.secretCode}\n    />\n\n    return (\n      <PageDiv>\n        <Text align='center' size='large'>Mastermind</Text>\n        <Stack justify='center'>\n          <Button id='rules' onClick={this.showModal.bind(this)}>How To Play</Button>\n          <Button id='leaderboard' onClick={this.showModal.bind(this)}>Leaderboard</Button>\n        </Stack>\n        {metaData}\n        <Rodal\n          visible={this.state.showrules}\n          onClose={this.hideModal.bind(this)}\n        >\n          <Rules />\n        </Rodal>\n        <Rodal\n          visible={this.state.showleaderboard}\n          onClose={this.hideModal.bind(this)}\n        >\n          <Leaderboard />\n        </Rodal>\n        <Rodal\n          visible={this.state.showconfirmexit}\n          onClose={this.hideModal.bind(this)}\n        >\n          <Leaderboard />\n        </Rodal>\n      </PageDiv>\n    )\n  }\n}\n\nexport default Game","import React from 'react'\nimport Header from './Components/Header'\nimport Game from './Containers/Game'\nimport './App.css'\n\nconst App = props => {\n  return (\n    <div>\n      <Header />\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}